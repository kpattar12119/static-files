/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.ajoberstar.grgit:grgit-gradle:4.0.0"
    }
}

apply plugin: org.ajoberstar.grgit.gradle.GrgitPlugin

import org.ajoberstar.grgit.Grgit

task gitInfo() {
//    outputs.upToDateWhen { false }
    doLast {
        def grgit = Grgit.open(dir: project.projectDir.toString())
        def branch = grgit.branch.getCurrent().getName() + '-' + grgit.head().id
        def repo = grgit.remote.list().collect { remote ->
            def url = remote.url
            def gitPostfix = url.indexOf(".git")
            return url.substring(url.indexOf(":") + 1, gitPostfix == -1 ? url.length() : gitPostfix)
        }.unique(false).getAt(0)

        project.properties.ext.set("branch", branch)
        project.properties.ext.set("repo", repo)

        def buildNumber = !releaseMode && project.hasProperty("buildNumber") && project.buildNumber?.trim() ? "-$project.buildNumber" : ''
        project.properties.ext.set('buildNumber', buildNumber)
    }
}

task addDockerfileToGit {
    doLast {
        grgit.add {
            patterns = ['Dockerfile']
        }
    }
}

task removeDockerfileFromGit {
    doLast {
        grgit.remove {
            patterns = ['Dockerfile']
        }
    }
}